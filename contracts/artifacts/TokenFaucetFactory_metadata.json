{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "faucetAddress",
						"type": "address"
					}
				],
				"name": "TokenFaucetCreated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "FACTORY_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "tokenName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "tokenSymbol",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "tokenDecimals",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "optionalAdminAddress",
						"type": "address"
					}
				],
				"name": "createTokenAndFaucet",
				"outputs": [
					{
						"internalType": "contract SimpleERC20Token",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "contract Faucet",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "deployedTokens",
				"outputs": [
					{
						"internalType": "contract SimpleERC20Token",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "contract Faucet",
						"name": "faucet",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getDeployedTokenFaucetPair",
				"outputs": [
					{
						"components": [
							{
								"internalType": "contract SimpleERC20Token",
								"name": "token",
								"type": "address"
							},
							{
								"internalType": "contract Faucet",
								"name": "faucet",
								"type": "address"
							}
						],
						"internalType": "struct TokenFaucetFactory.TokenFaucetPair",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDeployedTokensCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "count",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Inherits from OpenZeppelin's AccessControl contract to restrict certain functions to users with specific roles.",
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				]
			},
			"events": {
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				},
				"TokenFaucetCreated(address,address)": {
					"params": {
						"faucetAddress": "The address of the new faucet contract.",
						"tokenAddress": "The address of the new token contract."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Sets up the initial roles for the deploying address."
				},
				"createTokenAndFaucet(string,string,uint8,address)": {
					"details": "Both the token and the faucet are deployed and linked, and the initial supply is sent to the Faucet. An optional admin address can be specified for the Faucet contract.",
					"params": {
						"optionalAdminAddress": "If provided, Grants FAUCET_ADMIN_ROLE to this address on the new Faucet contract.",
						"tokenDecimals": "Number of decimals the ERC20 token uses.",
						"tokenName": "Name of the ERC20 token to be deployed.",
						"tokenSymbol": "Symbol of the ERC20 token to be deployed."
					},
					"returns": {
						"_0": "newToken The newly created SimpleERC20Token contract instance.",
						"_1": "newFaucet The newly created Faucet contract instance."
					}
				},
				"getDeployedTokenFaucetPair(uint256)": {
					"details": "Fetches a TokenFaucetPair from the deployedTokens array at the given index. Index must be within bounds of the array.",
					"params": {
						"index": "The index of the token-faucet pair in the deployedTokens array."
					},
					"returns": {
						"_0": "TokenFaucetPair The TokenFaucetPair located at the specified index."
					}
				},
				"getDeployedTokensCount()": {
					"details": "Retrieves the length of the deployedTokens array.",
					"returns": {
						"count": "The number of token-faucet pairs deployed by this contract."
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				}
			},
			"stateVariables": {
				"FACTORY_ADMIN_ROLE": {
					"details": "Role identifier for factory administrator."
				},
				"deployedTokens": {
					"details": "Array of all deployed token and faucet pairs."
				}
			},
			"title": "Token Faucet Factory Contract",
			"version": 1
		},
		"userdoc": {
			"events": {
				"TokenFaucetCreated(address,address)": {
					"notice": "Emitted when a new token and faucet are created."
				}
			},
			"kind": "user",
			"methods": {
				"createTokenAndFaucet(string,string,uint8,address)": {
					"notice": "Creates a new ERC20 token and corresponding Faucet contract."
				},
				"getDeployedTokenFaucetPair(uint256)": {
					"notice": "Retrieves a deployed token-faucet pair by its index."
				},
				"getDeployedTokensCount()": {
					"notice": "Gets the total count of deployed token-faucet pairs."
				}
			},
			"notice": "This contract allows deployers to create ERC20 tokens with an associated Faucet contract for distributing tokens freely.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/TokenFaucetFactory.sol": "TokenFaucetFactory"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/TokenFaucetFactory.sol": {
			"keccak256": "0xb828bdb5c863488411e53cd7bc4d482e86fc18916367f0145aa1d22fd0c84376",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5cd4f8a97e640cb619c680e8899031ea28d22eaa3e19564b5602d6b26f9d51d4",
				"dweb:/ipfs/QmT6gXvD7X8CqbNc94ADa9AKj42Yay2JBwgXj5orpGwaoB"
			]
		}
	},
	"version": 1
}